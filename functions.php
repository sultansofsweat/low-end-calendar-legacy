<?php
    //Import password functions
    require("password.php");
	//Legacy password handling function
    function old_password_verify($password,$hash)
    {
        $hp=hash("whirlpool",$password);
        return($hp == $hash);
    }
    
    //Function for getting new password cost
    function get_password_cost()
    {
        //Time target is 80 ms
        $target = 0.08;
        //Set baseline cost
        $cost = 7;
        //Set default values
        $start=0;
        $end=0;
        do
        {
            //Increment cost
            $cost++;
            //Start timer
            $start = microtime(true);
            //Compute hash
            password_hash("test", PASSWORD_BCRYPT, array("cost" => $cost));
            //End timer
            $end = microtime(true);
        } while (($end - $start) < $target);
    
        //Return the appropriate cost
        return $cost;
    }
	
	//Error handling function
	function eh($errno, $errstr, $errfile, $errline)
	{
		//Process error file
		$file=basename($errfile);
		
		switch ($errno)
		{
			//User error
			case E_USER_ERROR:
			echo "<b>ERROR:</b> $errstr<br>\nLocated on line $errline in file $file";
			exit(1);
			break;
			
			//User warning
			case E_USER_WARNING:
			echo "<b>WARNING:</b> $errstr<br>\nLocated on line $errline in file $file";
			break;
			
			//User notice
			case E_USER_NOTICE:
			echo "<b>NOTICE:</b> $errstr<br>\nLocated on line $errline in file $file";
			break;
			
			//User deprecation notice
			case E_USER_DEPRECATED:
			echo "<b>DEPRECATED FUNCTION:</b> $errstr<br>\nLocated on line $errline in file $file";
			break;
			
			//PHP error
			case E_ERROR:
			echo "<b>ERROR:</b> $errstr (Generated by PHP)<br>\nLocated on line $errline in file $file";
			exit(1);
			break;
			
			//PHP warning
			case E_WARNING:
			echo "<b>WARNING:</b> $errstr (Generated by PHP)<br>\nLocated on line $errline in file $file";
			break;
			
			//PHP notice
			case E_NOTICE:
			echo "<b>NOTICE:</b> $errstr (Generated by PHP)<br>\nLocated on line $errline in file $file";
			break;
			
			//PHP deprecation notice
			case E_DEPRECATED:
			echo "<b>DEPRECATED FUNCTION:</b> $errstr (Generated by PHP)<br>\nLocated on line $errline in file $file";
			break;
			
			//Some other unknown error
			default:
			echo "<b>Unknown issue [$errno]:</b> $errstr<br>\nLocated on line $errline in file $file";
			break;
		}
		echo ("<br><br>");

		/* Don't execute PHP internal error handler */
		return true;
	}
	//Set error handler
	$oeh=set_error_handler("eh");
	
	//Define default timezone
	if(isset($_SESSION["timezone"]) && $_SESSION["timezone"] != "")
	{
		date_default_timezone_set($_SESSION["timezone"]);
	}
	else
	{
		date_default_timezone_set("America/Toronto");
	}
	
	//Function for opening the database
	function open_db($file,$mode)
	{
		if(!file_exists($file))
		{
			trigger_error("The file passed to function open_db has been abducted by Russians.",E_USER_WARNING);
			return false;
		}
		elseif($mode != SQLITE3_OPEN_READONLY && $mode != SQLITE3_OPEN_READWRITE)
		{
			trigger_error("Parameter mode passed to function open_db is not a valid parameter value.",E_USER_WARNING);
			return false;
		}
		try
		{
			return new SQLite3($file,$mode);
		}
		catch(Exception $e)
		{
			trigger_error("The database file has defenestrated your modem.",E_USER_WARNING);
			return false;
		}
	}
	//Function for closing the database
	function close_db($db)
	{
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function close_db is not a valid database.",E_USER_WARNING);
			return false;
		}
		return $db->close();
	}
	
	//Function for inserting user information
	function insert_user($db,$username,$login,$password,$userlevel)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function insert_user is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("INSERT INTO users(name,login,password,privilege) VALUES (?,?,?,?)");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$username,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$password,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,$userlevel,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to insert user.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for updating user information
	function update_user($db,$username,$login,$password,$userlevel,$timezone,$style)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function update_user is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE users SET name = ?, password = ?, privilege = ?, timezone = ?, stylesheet = ? WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$username,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$password,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$userlevel,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,$timezone,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(5,$style,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(6,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_user.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to update user.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for updating user's password
	function update_password($db,$login,$password)
	{
		trigger_error("Function update_password is deprecated and will be removed in a future release of LECal.",E_USER_DEPRECATED);
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function update_password is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE users SET password = ? WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function update_password.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$password,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_password.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_password.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to update password.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for deleting a user
	function delete_user($db,$login)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function delete_user is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Make sure user is not root!
		if($login == "root")
		{
			trigger_error("Cannot delete the root superuser, aborting.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("DELETE FROM users WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function delete_user.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_user.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to delete user.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for setting a user's new last login date
	function set_last_login($db,$login)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function set_last_login is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE users SET lastlogin = ?, logincount = logincount + 1 WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function set_last_login.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,time(),SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function set_last_login.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function set_last_login.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to set last login.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for getting all users' information
	function get_all_users($db)
	{
		$userlist=array();
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_all_users is not a valid database.",E_USER_WARNING);
			return $userlist;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT login,name,privilege,timezone,stylesheet FROM users");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_all_users.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for users.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$user=array("shonejob","Systemhad Onejob",1,"America/Toronto","white",false);
			if(isset($entry["Login"]))
			{
				$user[0]=$entry["Login"];
			}
			if(isset($entry["Name"]))
			{
				$user[1]=$entry["Name"];
			}
			if(isset($entry["Privilege"]))
			{
				$user[2]=$entry["Privilege"];
			}
			if(isset($entry["Timezone"]))
			{
				$user[3]=$entry["Timezone"];
			}
			if(isset($entry["Stylesheet"]))
			{
				$user[4]=$entry["Stylesheet"];
			}
			$userlist[]=$user;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $userlist;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $userlist;
	}
	//Function for getting a user's information
	function get_user($db,$login)
	{
		$user=array("shonejob","Systemhad Onejob",1,"America/Toronto","white",false);
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_user is not a valid database.",E_USER_WARNING);
			return $user;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT name,privilege,timezone,stylesheet FROM users WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_user.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function get_user.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for user.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$user[0]=$login;
			if(isset($entry["Name"]))
			{
				$user[1]=$entry["Name"];
			}
			if(isset($entry["Privilege"]))
			{
				$user[2]=$entry["Privilege"];
			}
			if(isset($entry["Timezone"]))
			{
				$user[3]=$entry["Timezone"];
			}
			if(isset($entry["Stylesheet"]))
			{
				$user[4]=$entry["Stylesheet"];
			}
			if($user[0] != "shonejob" && $user[1] != "Systemhad Onejob")
			{
				unset($user[5]);
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $user;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $user;
	}
    //Function for getting last login information
	function get_last_login($db)
	{
		$userlist=array();
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_last_login is not a valid database.",E_USER_WARNING);
			return $userlist;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT login,name,logincount,lastlogin FROM users");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_last_login.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for last login information.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$user=array("shonejob","Systemhad Onejob",0,0);
			if(isset($entry["Login"]))
			{
				$user[0]=$entry["Login"];
			}
			if(isset($entry["Name"]))
			{
				$user[1]=$entry["Name"];
			}
			if(isset($entry["LoginCount"]))
			{
				$user[2]=$entry["LoginCount"];
			}
			if(isset($entry["LastLogin"]))
			{
				$user[3]=$entry["LastLogin"];
			}
			$userlist[]=$user;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $userlist;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $userlist;
	}
	//Function for getting a user's password
	function get_password($db,$login)
	{
		$password="";
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_password is not a valid database.",E_USER_WARNING);
			return $password;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT password FROM users WHERE login = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_password.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$login,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function get_password.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for password.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			if(isset($entry["Password"]))
			{
				$password=$entry["Password"];
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $password;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $password;
	}
	//Function for getting a count of all the users
	function get_user_count($db)
	{
		$count=0;
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_user_count is not a valid database.",E_USER_WARNING);
			return $count;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT COUNT(login) FROM users");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_user_count.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for user count.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray())
		{
			if(isset($entry[0]))
			{
				$count=$entry[0];
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $count;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $count;
	}
	//Function for modifying a user's login
	function change_login_name($db,$old,$new)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function change_login_name is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Make sure old username is not root
		if($login == "root")
		{
			trigger_error("Cannot modify login name for the root superuser, aborting.",E_USER_WARNING);
			return false;
		}
		//Get old user details
		//Insert new user using old details
		//Delete old user
		trigger_error("This function is not yet implemented.");
		return false;
	}
	
	//Function for getting a system setting
	function get_setting($db,$setting)
	{
		//List defaults
		$defaults=array("allowregistration" => "no","openviewing" => "no","calendarname" => "My Calendar","timezone" => "America/Toronto","stylesheet" => "white","increment" => 5);
		if(isset($defaults[$setting]))
		{
			$value=$defaults[$setting];
		}
		else
		{
			trigger_error("Parameter passed to function get_setting is not a valid setting.",E_USER_WARNING);
			$value="";
		}
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_setting is not a valid database.",E_USER_WARNING);
			return $value;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT value FROM settings WHERE name = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_setting.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$setting,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function get_setting.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for setting.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			if(isset($entry["Value"]))
			{
				$value=$entry["Value"];
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $value;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $value;
	}
	//Function for setting a system setting
	function set_setting($db,$setting,$value)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function set_setting is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE settings SET value = ? WHERE name = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function set_setting.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$value,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function set_setting.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$setting,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function set_setting.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to change setting.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for getting the default stylesheet
	function get_default_style()
	{
		//Open database
		$db=new SQLite3("db/calendar.sqlite",SQLITE3_OPEN_READONLY);
		//Get stylesheet setting field
		$sheet=get_setting($db,"stylesheet");
		//Make sure stylesheet exists
		if(!file_exists("styles/$sheet.css"))
		{
			trigger_error("Default stylesheet $sheet doesn't exist, falling back to system defaults.",E_USER_WARNING);
			return "styles/white.css";
		}
		//Return formatted string
		return "styles/$sheet.css";
	}
	//Function for getting all stylesheets as an array of form ["filename"=>"displayname"]
	function get_all_styles()
	{
		//Initialize array
		$styles=array();
		//Check if list of stylesheets exists
		if(file_exists("db/stylesheets.txt"))
		{
			//Read file and split by line (each line corresponds to one sheet)
			$rawstyles=explode("\r\n",file_get_contents("db/stylesheets.txt"));
			//Check and make sure entries exist
			if(count($rawstyles) > 0)
			{
				//Loop through entries
				foreach($rawstyles as $style)
				{
					//Split entry to filename and displayname
					$style=explode("|",$style);
					//Make sure format is OK
					if(count($style) == 2)
					{
						//Add to list
						$styles[$style[0]]=$style[1];
					}
					else
					{
						//Output notice and ignore
						trigger_error("Stylesheet list entry \"" . implode("|",$style) . "\" is bogus and will be ignored.",E_USER_WARNING);
					}
				}
			}
			else
			{
				trigger_error("Stylesheet list empty, falling back to system defaults.",E_USER_WARNING);
				$styles["white"]="White";
			}
		}
		else
		{
			trigger_error("Stylesheet list does not exist, falling back to system defaults.",E_USER_WARNING);
			$styles["white"]="White";
		}
		//Return list of stylesheets
		return $styles;
	}
	
	//Function for inserting a calendar event
	function insert_event($db,$name,$owner,$location,$start,$end,$allday,$description,$invitees,$public,$created,$repeat)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function insert_event is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("INSERT INTO events(name,owner,start,end,allday,description,invitees,location,private,created,repeat,dst) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$name,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$owner,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$start,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,$end,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(5,$allday,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(6,$description,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(7,$invitees,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(8,$location,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(9,$public,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(10,$created,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(11,$repeat,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(12,date("I"),SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_event.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to insert event.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for updating a calendar event
	function update_event($db,$id,$name,$owner,$location,$start,$end,$allday,$description,$invitees,$public,$repeat)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function update_event is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE events SET name = ?, owner = ?, location = ?, start = ?, end = ?, allday = ?, description = ?, invitees = ?, private = ?, repeat = ?, dst = ? WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		//Set end to 0 if allday is true
		if($allday === true)
		{
			$end=0;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$name,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$owner,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$location,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,$start,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(5,$end,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(6,$allday,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(7,$description,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(8,$invitees,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(9,$public,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(10,$repeat,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(11,date("I"),SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(12,$id,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_event.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to update event.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for deleting a calendar event
	function delete_event($db,$id)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function delete_event is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("DELETE FROM events WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function delete_user.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$id,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function delete_event.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to delete event.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for getting all events
	function get_all_events($db)
	{
		$events=array();
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_all_events is not a valid database.",E_USER_WARNING);
			return $event;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT id,name,owner,location,start,end,allday,description,invitees,private,created,repeat,dst FROM events ORDER BY id DESC");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_all_events.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for events.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$event=array(-1,"One Job Event",-1,0,0,1,"The system only had ONE JOB and should now have a GPX clock radio thrown at it.","",0,"",0,"");
			if(isset($entry["ID"]))
			{
				$event[0]=$entry["ID"];
			}
			if(isset($entry["Name"]))
			{
				$event[1]=$entry["Name"];
			}
			if(isset($entry["Owner"]))
			{
				$event[2]=$entry["Owner"];
			}
			if(isset($entry["Start"]))
			{
				$event[3]=$entry["Start"];
			}
			if(isset($entry["End"]))
			{
				$event[4]=$entry["End"];
			}
			if(isset($entry["Allday"]))
			{
				$event[5]=$entry["Allday"];
			}
			if(isset($entry["Description"]))
			{
				$event[6]=$entry["Description"];
			}
			if(isset($entry["Invitees"]))
			{
				$event[7]=$entry["Invitees"];
			}
			if(isset($entry["Private"]))
			{
				$event[8]=$entry["Private"];
			}
			if(isset($entry["Location"]))
			{
				$event[9]=$entry["Location"];
			}
			if(isset($entry["Created"]))
			{
				$event[10]=$entry["Created"];
			}
			if(isset($entry["Repeat"]))
			{
				$event[11]=$entry["Repeat"];
			}
			
			if(isset($entry["DST"]) && $entry["DST"] != date("I"))
			{
				if($entry["DST"] == 0 && date("I") == 1)
				{
					$event[3]-=(60*60);
					if($event[4] > 0)
					{
						$event[4]-=(60*60);
					}
				}
				elseif($entry["DST"] == 1 && date("I") == 0)
				{
					$event[3]+=(60*60);
					if($event[4] > 0)
					{
						$event[4]+=(60*60);
					}
				}
				else
				{
					trigger_error("Something wicked occurred during DST processing. Leaving untouched, expect problems.");
				}
			}
			
			$events[]=$event;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $events;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $events;
	}
	//Function for getting a calendar event
	function get_event($db,$id)
	{
		$event=false;
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_event is not a valid database.",E_USER_WARNING);
			return $event;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT name,owner,location,start,end,allday,description,invitees,private,created,repeat,dst FROM events WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_event.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(1,$id,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function get_event.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for event.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$event=array("One Job Event",-1,0,0,1,"The system only had ONE JOB and should now have a GPX clock radio thrown at it.","",0,"",0,"");
			if(isset($entry["Name"]))
			{
				$event[0]=$entry["Name"];
			}
			if(isset($entry["Owner"]))
			{
				$event[1]=$entry["Owner"];
			}
			if(isset($entry["Start"]))
			{
				$event[2]=$entry["Start"];
			}
			if(isset($entry["End"]))
			{
				$event[3]=$entry["End"];
			}
			if(isset($entry["Allday"]))
			{
				$event[4]=$entry["Allday"];
			}
			if(isset($entry["Description"]))
			{
				$event[5]=$entry["Description"];
			}
			if(isset($entry["Invitees"]))
			{
				$event[6]=$entry["Invitees"];
			}
			if(isset($entry["Private"]))
			{
				$event[7]=$entry["Private"];
			}
			if(isset($entry["Location"]))
			{
				$event[8]=$entry["Location"];
			}
			if(isset($entry["Created"]))
			{
				$event[9]=$entry["Created"];
			}
			if(isset($entry["Repeat"]))
			{
				$event[10]=$entry["Repeat"];
			}
			
			if(isset($entry["DST"]) && $entry["DST"] != date("I"))
			{
				/*if($entry["DST"] == 0 && date("I") == 1)
				{
					$event[2]-=(60*60);
					if($event[3] > 0)
					{
						$event[3]-=(60*60);
					}
				}
				elseif($entry["DST"] == 1 && date("I") == 0)
				{
					$event[2]+=(60*60);
					if($event[3] > 0)
					{
						$event[3]+=(60*60);
					}
				}
				else
				{
					trigger_error("Something wicked occurred during DST processing. Leaving untouched, expect problems.");
				}*/
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $event;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $event;
	}
	
	//Function for optimizing the database
	function optimize_database($db)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function optimize_database is not a valid database.",E_USER_WARNING);
			return $event;
		}
		//Run vacuum command
		$debug=$db->exec("VACUUM");
		//Wait for a bit...
		sleep(10);
		//Return result
		return $debug;
	}
	
	//Function for cleansing the event list (making sure all events are OK for display)
	function event_display_prepare($username,$userlevel,$eventlist)
	{
		$events=array();
		if(count($eventlist) > 0)
		{
			foreach($eventlist as $event)
			{
				//FORMAT: ID,Name,Owner,Start,End,Allday,Description,Invitees,Private,Location,Created,Repeat
				if($username == "" || $userlevel == 0)
				{
					if($event[8] == 0)
					{
						$events[]=$event;
					}
					continue;
				}
				if($event[8] == 0)
				{
					$events[]=$event;
				}
				elseif($event[2] == $username || $userlevel >= 3)
				{
					$events[]=$event;
				}
				else
				{
					$plist=explode(",",$event[7]);
					if(count($plist) > 0)
					{
						foreach($plist as $p)
						{
							if($username == $p)
							{
								$events[]=$event;
								break;
							}
						}
					}
				}
			}
		}
		return $events;
	}
	//Function for cleansing the event list (making sure all events are OK for display) for deletion
	function event_display_prepare_removal($username,$userlevel,$eventlist)
	{
		$events=array();
		if(count($eventlist) > 0)
		{
			foreach($eventlist as $event)
			{
				//FORMAT: ID,Name,Owner,Start,End,Allday,Description,Invitees,Private,Location,Created,Repeat
				if($event[2] == $username || $userlevel >= 3)
				{
					$events[]=$event;
				}
				else
				{
					$plist=explode(",",$event[7]);
					if(count($plist) > 0)
					{
						foreach($plist as $p)
						{
							if($username == $p)
							{
								$events[]=$event;
								break;
							}
						}
					}
				}
			}
		}
		return $events;
	}
	
	//Function for inserting a ticket
	function insert_ticket($db,$user,$type,$details)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function insert_ticket is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("INSERT INTO tickets(user,type,details,status) VALUES (?,?,?,?)");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function insert_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$user,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$type,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$details,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,0,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function insert_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to insert ticket.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for editing a ticket
	function update_ticket($db,$id,$responder,$status,$response)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function update_ticket is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("UPDATE tickets SET responder = ?, status = ?, response = ? WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function update_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$responder,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(2,$status,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(3,$response,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_ticket.",E_USER_WARNING);
			goto finish;
		}
		$debug=$statement->bindValue(4,$id,SQLITE3_INTEGER);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function update_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to update ticket.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for deleting a ticket
	function delete_ticket($db,$id)
	{
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function delete_ticket is not a valid database.",E_USER_WARNING);
			return false;
		}
		//Prepare statement
		$statement=$db->prepare("DELETE FROM tickets WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function delete_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$id,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function delete_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to delete ticket.",E_USER_WARNING);
			goto finish;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return true;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return false;
	}
	//Function for getting all tickets
	function get_tickets($db)
	{
		$events=array();
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_tickets is not a valid database.",E_USER_WARNING);
			return $event;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT id,user,responder,type,details,status,response FROM tickets ORDER BY status ASC");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_tickets.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for tickets.",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$event=array(-1,-1,-1,"One Job Ticket","The system only had ONE JOB and should now have a GPX clock radio thrown at it.",0,"");
			if(isset($entry["ID"]))
			{
				$event[0]=$entry["ID"];
			}
			if(isset($entry["User"]))
			{
				$event[1]=$entry["User"];
			}
			if(isset($entry["Responder"]))
			{
				$event[2]=$entry["Responder"];
			}
			if(isset($entry["Type"]))
			{
				$event[3]=$entry["Type"];
			}
			if(isset($entry["Details"]))
			{
				$event[4]=$entry["Details"];
			}
			if(isset($entry["Status"]))
			{
				$event[5]=$entry["Status"];
			}
			if(isset($entry["Response"]))
			{
				$event[6]=$entry["Response"];
			}
			$events[]=$event;
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $events;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $events;
	}
	//Function for getting a ticket
	function get_ticket($db)
	{
		$event=false;
		//Make sure a database is actually passed in
		if(!is_a($db,"SQLite3"))
		{
			trigger_error("Handle passed to function get_ticket is not a valid database.",E_USER_WARNING);
			return $event;
		}
		//Prepare statement
		$statement=$db->prepare("SELECT id,user,responder,type,details,status,response FROM tickets WHERE id = ?");
		if($statement === false)
		{
			trigger_error("Failed to prepare statement in function get_ticket",E_USER_WARNING);
			goto finish;
		}
		//Bind variables to statement
		$debug=$statement->bindValue(1,$id,SQLITE3_TEXT);
		if($debug === false)
		{
			trigger_error("Failed to assign values to prepared statement in function get_ticket.",E_USER_WARNING);
			goto finish;
		}
		//Execute statement
		$result=$statement->execute();
		if($result === false)
		{
			trigger_error("Failed to query for ticket",E_USER_WARNING);
			goto finish;
		}
		
		while($entry=$result->fetchArray(SQLITE3_ASSOC))
		{
			$event=array(-1,-1,-1,"One Job Ticket","The system only had ONE JOB and should now have a GPX clock radio thrown at it.",0,"");
			if(isset($entry["ID"]))
			{
				$event[0]=$entry["ID"];
			}
			if(isset($entry["User"]))
			{
				$event[1]=$entry["User"];
			}
			if(isset($entry["Responder"]))
			{
				$event[2]=$entry["Responder"];
			}
			if(isset($entry["Type"]))
			{
				$event[3]=$entry["Type"];
			}
			if(isset($entry["Details"]))
			{
				$event[4]=$entry["Details"];
			}
			if(isset($entry["Status"]))
			{
				$event[5]=$entry["Status"];
			}
			if(isset($entry["Response"]))
			{
				$event[6]=$entry["Response"];
			}
		}
		
		//Close statement
		$statement->close();
		unset($statement);
		//Success
		return $event;
		
		finish:
		//Close statement if necessary
		if(isset($statement) && is_a($statement,"SQLite3Stmt"))
		{
			$statement->close();
			unset($statement);
		}
		//Failure
		return $event;
	}
    
    //Function for getting version information
    function get_version()
    {
        $verinfo=array("System.Had","One","Job");
        if(file_exists("db/version.txt"))
        {
            $vi=explode("\r\n",file_get_contents("db/version.txt"));
            if(count($vi) == 3)
            {
                $verinfo[0]=$vi[0];
                $verinfo[1]=$vi[1];
                $verinfo[2]=$vi[2];
            }
        }
        return $verinfo;
    }
?>